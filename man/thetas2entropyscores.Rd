% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thetas2entropyscores.R
\name{thetas2entropyscores}
\alias{thetas2entropyscores}
\title{Convert theta scores to entropy bit scores}
\usage{
thetas2entropyscores(
  model,
  thetas,
  items = 1:length(model$parList[[iter]]$WfdList),
  grid_size = 10000,
  return_grid = FALSE
)
}
\arguments{
\item{model}{An fitted TestGardener model object returned by the Analyze function.}

\item{thetas}{A numeric vector of theta scores.}

\item{items}{A numeric vector indicating which items to use for computation. By default, it uses all items.}

\item{grid_size}{An integer specifying the size of the theta grid used for entropy score computation. A higher value leads to improved accuracy. Default is 10000.}

\item{return_grid}{Whether or not to return the entropy score for each value in the grid used for computation or only the entropy scores for the input thetas. Default is FALSE.}
}
\value{
A matrix with columns: 'theta' (theta scores) and 'entropy_score' (theta corresponding entropy scores).
}
\description{
This function takes a vector of theta scores from a fitted model and converts them to entropy bit scores.
}
\examples{
# Read data and fit a model
U <- as.matrix(read.table("data/Quant_13B_problem_U.txt"))
key <- scan("data/Quant_13B_problem_key.txt","o")
key <- as.numeric(unlist(stringr::str_split(key,"")))
noption <- rep(5, ncol(U)) # 5 options per item

ScoreList <- list() # option scores
for (item in 1:ncol(U)){
  scorei <- rep(0,noption[item])
  scorei[key[item]] <- 1
  ScoreList[[item]] <- scorei
}

optList <- list(itemLab=NULL, optLab=NULL, optScr=ScoreList)
Math_dataList <- TestGardener::make.dataList(U, key, optList)

AnalyzeResult <- TestGardener::Analyze(
  Math_dataList$percntrnk, 
  Math_dataList$thetaQnt, 
  Math_dataList, 
  ncycle = 10, 
  itdisp=FALSE, 
  verbose=TRUE
) 

# Get the theta scores in the data and compute their corresponding entropy bit scores
thetas <- AnalyzeResult$parList[[10]]$theta
entropy_scores <- thetas2entropyscores(AnalyzeResult, thetas)
entropy_scores

}
